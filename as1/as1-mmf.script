Script started on Mon 01 Sep 2014 12:53:57 PM EDT
]0;mmfansler@cook:~[?1034h[mmfansler@cook ~]$ find -name '*.o' -size +5119c -exec ls -l '{}' \;
-rw-r--r--. 1 mmfansler students 5608 Sep  1 12:43 ./csprojects/csci435/samples/RecursiveDescent/Others/ExprLonger.o
-rw-r--r--. 1 mmfansler students 7472 Sep  1 12:43 ./csprojects/csci435/samples/RecursiveDescent/Others/Language.o
-rw-r--r--. 1 mmfansler students 21264 Sep  1 12:43 ./csprojects/csci435/samples/FlexExamples/PascalLexer.o
-rw-r--r--. 1 mmfansler students 17400 Sep  1 12:43 ./csprojects/csci435/samples/FlexExamples/Username.o
-rw-r--r--. 1 mmfansler students 17880 Sep  1 12:43 ./csprojects/csci435/samples/FlexExamples/WordCount.o
-rw-r--r--. 1 mmfansler students 17568 Sep  1 12:43 ./csprojects/csci435/samples/FlexExamples/LineCount.o
]0;mmfansler@cook:~[mmfansler@cook ~]$ find2perl -name '*.o' -size +5119c -exec ls -l '{}' \;
#! /usr/bin/perl -w
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if 0; #$running_under_some_shell

use strict;
use File::Find ();

# Set the variable $File::Find::dont_use_nlink if you're using AFS,
# since AFS cheats.

# for the convenience of &wanted calls, including -eval statements:
use vars qw/*name *dir *prune/;
*name   = *File::Find::name;
*dir    = *File::Find::dir;
*prune  = *File::Find::prune;

sub wanted;
sub doexec ($@);


use Cwd ();
my $cwd = Cwd::cwd();


# Traverse desired filesystems
File::Find::find({wanted => \&wanted}, '.');
exit;


sub wanted {
    my ($dev,$ino,$mode,$nlink,$uid,$gid);

    /^.*\.o\z/s &&
    (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) &&
    (int(-s _) > 5119) &&
    doexec(0, 'ls','-l','{}');
}


sub doexec ($@) {
    my $ok = shift;
    my @command = @_; # copy so we don't try to s/// aliases to constants
    for my $word (@command)
        { $word =~ s#{}#$name#g }
    if ($ok) {
        my $old = select(STDOUT);
        $| = 1;
        print "@command";
        select($old);
        return 0 unless <STDIN> =~ /^y/;
    }
    chdir $cwd; #sigh
    system @command;
    chdir $File::Find::dir;
    return !$?;
}

]0;mmfansler@cook:~[mmfansler@cook ~]$ find2perl -name '*.o' -size +5119c -exec ls -l '{}' \; | perl
-rw-r--r--. 1 mmfansler students 5608 Sep  1 12:43 ./csprojects/csci435/samples/RecursiveDescent/Others/ExprLonger.o
-rw-r--r--. 1 mmfansler students 7472 Sep  1 12:43 ./csprojects/csci435/samples/RecursiveDescent/Others/Language.o
-rw-r--r--. 1 mmfansler students 21264 Sep  1 12:43 ./csprojects/csci435/samples/FlexExamples/PascalLexer.o
-rw-r--r--. 1 mmfansler students 17400 Sep  1 12:43 ./csprojects/csci435/samples/FlexExamples/Username.o
-rw-r--r--. 1 mmfansler students 17880 Sep  1 12:43 ./csprojects/csci435/samples/FlexExamples/WordCount.o
-rw-r--r--. 1 mmfansler students 17568 Sep  1 12:43 ./csprojects/csci435/samples/FlexExamples/LineCount.o
]0;mmfansler@cook:~[mmfansler@cook ~]$ exit
exit

Script done on Mon 01 Sep 2014 12:55:06 PM EDT

/* ===================================== Commentary ======================================= */

The find2perl command uses the File::Find Perl method to search the directory the find command
would have been executed in.  The generated Perl code includes two subroutines: `wanted` and 
`doexec'.  The former consists of a translation of the filters (e.g., '-name ...') to a chain
of Boolean tests.  '-name' is translated to a regex test; '-size' translates to a pair, the
first of which extracts generic info on the file object, and the second tests specifically the
value of the size property, after converting it to an int type.  At the end of the chain of 
Boolean tests is a call to the `doexec` subroutine, which executes the `ls -l` command and
prints the result.

This utility would be useful for saving common operations as on-demand executable scripts.
Another application would be a quick and dirty way of generating specific subroutines in a 
larger Perl script you are writing, especially if you already know how to carry out the
operation via `find`.

MMF
