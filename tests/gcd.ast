Program Node
  Function: gcd: Int type
    Parameter: u: Int type
    Parameter: v: Int type
    CompoundStatement
      If
        RelationalExpression: ==
          Left:
            Variable: v: Int type
          Right:
            Integer: 0: Int type
        Return
          Variable: u: Int type
        Return
          FunctionCall: gcd: Int type
            Arguments:
              Variable: v: Int type
              AdditiveExpression: -
                Left:
                  Variable: u: Int type
                Right:
                  MultiplicativeExpression: *
                    Left:
                      MultiplicativeExpression: /
                        Left:
                          Variable: u: Int type
                        Right:
                          Variable: v: Int type
                    Right:
                      Variable: v: Int type
  Function: main: Void type
    CompoundStatement
      VariableDeclaration: x: Int type
      VariableDeclaration: y: Int type
      ExpressionStatement
        Assignment
          Variable: x: Int type
          FunctionCall: input: Int type ()
      ExpressionStatement
        Assignment
          Variable: y: Int type
          FunctionCall: input: Int type ()
      ExpressionStatement
        FunctionCall: output: Void type
          Arguments:
            FunctionCall: gcd: Int type
              Arguments:
                Variable: x: Int type
                Variable: y: Int type
